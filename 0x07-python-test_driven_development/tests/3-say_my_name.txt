*============================================================================*
|                                                                            |
|   Test cases for function that prints My name is <first name> <last name>  |
|                                                                            |
*============================================================================*

Import function from Module:

        >>> say_my_name = __import__('3-say_my_name').say_my_name

Cheking Docstring:

        >>> docstring = __import__('3-say_my_name').__doc__
        >>> len(docstring) > 0
        True

Checking for first name is string:

	>>> say_my_name(123, "smith")
	Traceback (most recent call last):
        ...
        TypeError: first_name must be a string

Checking for last name is string:

        >>> say_my_name("jhon", 123)
        Traceback (most recent call last):
        ...
        TypeError: last_name must be a string

Checking for special character as arg:

	>>> say_my_name(['Eric', 'lucy', 'Cesar'], 'Bob')
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string

Checking for special character as second arg:

	>>> say_my_name('Bob', ['Eric', 'Cesar', 'eva'])
	Traceback (most recent call last):
	...
	TypeError: last_name must be a string

More checks:

>>> say_my_name(12, 98)
Traceback (most recent call last):
...
TypeError: first_name must be a string

>>> say_my_name(None)
Traceback (most recent call last):
...
TypeError: first_name must be a string

>>> say_my_name()
Traceback (most recent call last):
...
TypeError: say_my_name() missing 1 required positional argument: 'first_name'

>>> say_my_name("John", "Smith")
My name is John Smith

>>> say_my_name("Bob")
My name is Bob 

>>> say_my_name("Bob The Builder")
My name is Bob The Builder 
	
>>> say_my_name("Bob The", "Strong Builder")
My name is Bob The Strong Builder
	
>>> say_my_name("")
My name is  
	
>>> say_my_name("", "")
My name is  
	
>>> say_my_name(" ")
My name is   
	
>>> say_my_name(" ", " ")
My name is    
	
>>> say_my_name("&@{", "()")
My name is &@{ ()
